context = "window",
count = "weighted",
window= 10, # mean result of lyrics set
weights = 1/(1:10), # custom
tri = FALSE)
glove <- GlobalVectors$new(rank = 50, x_max = 10) # model
word_vectors_main <- glove$fit_transform(fcm, n_iter = 100) # a changer !
word_vectors_context <- glove$components
glove_model <- word_vectors_main + t(word_vectors_context)
## RWMD algo to computes distances
dtm<-dfm(music.tk)
music.rwmd<-RelaxedWordMoversDistance$new(dtm,glove_model)
#speech.rwms <- speech.rwmd.mode$sim2(dtm)
music.rwmd <- music.rwmd$dist2(dtm) ## distances obtained
#######
myfunct2 <- function(){ ## function that returns 2 lists : artist_name and track_name
mylist <- c()
mylist_w<-c()
l <- shuffuled_music3$artist_name
w <-  shuffuled_music3$track_name
for (i in 1:length(l)){
mylist<-append(mylist,l[i])
}
for(i in 1:length(w)){
mylist_w<-append(mylist_w,w[i])
}
mylist <<- mylist
mylist_w <<-mylist_w
} # get name lists
myfunct2()
row.names(music.rwmd) <- mylist
colnames(music.rwmd)<-mylist
#### network part
X1 <- c('low','sandra','bobby vee','bobby vee','bobby vee','pat travers','pat travers','pat travers57','pat travers',
'timothy b. schmit60','timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit',
'timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit',
'timothy b. schmit','the dave clark five','the dave clark five','the dave clark five',
'the dave clark five98','the dave clark five','the dave clark five','the dave clark five',
'the dave clark five','the dave clark five','the dave clark five','joe liggins','joe liggins',
'joe liggins','joe liggins46','julian marley','the dubs')
X2 <- c('the sundays','rex smith','lebrado','floetry','pat travers','granger smith','nada surf','julian marley',
'timothy b. schmit','the dubs','nick lowe','steely dan','delicatessen','alien ant farm','camila cabello',
'solange','the fortunes','a r i z o n a','elkie brooks','pat travers','brick & lace','nada surf',
'phil perry','wax tailor','joe liggins','pennywise','nick lowe','delicatessen','nick lowe','the dubs',
'incognito','walter trout','brian wilson','the vaughan brothers','joe liggins','lester davenport')
networkData <- data.frame(X1,X2)
recoFunction('jay z')
recoFunction('sandra')
music.tk <- tokens(
music.corpus,
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_separators=TRUE)%>%
tokens_tolower() %>%
tokens_remove(stop_words$word)%>% tokens_replace(.,pattern = hash_lemmas$token,
replacement = hash_lemmas$lemma)
et.seed(1234)# reproductibility
set.seed(1234)# reproductibility
sampled_unique_rows <- music_sim[!duplicated(music_sim$artist_name), ]
sampled_rows <- sampled_unique_rows[sample(nrow(sampled_unique_rows)), ]
shuffuled_music3 <- sampled_rows[1:100,]
!shuffuled_music3$artist_name %in% shuffuled_music3$artist_name[duplicated(shuffuled_music3$artist_name )]
music.corpus<- corpus(shuffuled_music3$lyrics)
music.tk <- tokens(
music.corpus,
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_separators=TRUE)%>%
tokens_tolower() %>%
tokens_remove(stop_words$word)%>% tokens_replace(.,pattern = hash_lemmas$token,
replacement = hash_lemmas$lemma)
### GLOVE MODEL
fcm <- fcm(music.tk,
context = "window",
count = "weighted",
window= 10, # mean result of lyrics set
weights = 1/(1:10), # custom
tri = FALSE)
glove <- GlobalVectors$new(rank = 50, x_max = 10) # model
word_vectors_main <- glove$fit_transform(fcm, n_iter = 100) # a changer !
word_vectors_context <- glove$components
glove_model <- word_vectors_main + t(word_vectors_context)
## RWMD algo to computes distances
dtm<-dfm(music.tk)
music.rwmd<-RelaxedWordMoversDistance$new(dtm,glove_model)
music.rwmd <- music.rwmd$dist2(dtm) ## distances obtained
#######
myfunct2 <- function(){ ## function that returns 2 lists : artist_name and track_name
mylist <- c()
mylist_w<-c()
l <- shuffuled_music3$artist_name
w <-  shuffuled_music3$track_name
for (i in 1:length(l)){
mylist<-append(mylist,l[i])
}
for(i in 1:length(w)){
mylist_w<-append(mylist_w,w[i])
}
mylist <<- mylist
mylist_w <<-mylist_w
} # get name lists
myfunct2()
row.names(music.rwmd) <- mylist
colnames(music.rwmd)<-mylist
#### network part
X1 <- c('low','sandra','bobby vee','bobby vee','bobby vee','pat travers','pat travers','pat travers57','pat travers',
'timothy b. schmit60','timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit',
'timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit',
'timothy b. schmit','the dave clark five','the dave clark five','the dave clark five',
'the dave clark five98','the dave clark five','the dave clark five','the dave clark five',
'the dave clark five','the dave clark five','the dave clark five','joe liggins','joe liggins',
'joe liggins','joe liggins46','julian marley','the dubs')
X2 <- c('the sundays','rex smith','lebrado','floetry','pat travers','granger smith','nada surf','julian marley',
'timothy b. schmit','the dubs','nick lowe','steely dan','delicatessen','alien ant farm','camila cabello',
'solange','the fortunes','a r i z o n a','elkie brooks','pat travers','brick & lace','nada surf',
'phil perry','wax tailor','joe liggins','pennywise','nick lowe','delicatessen','nick lowe','the dubs',
'incognito','walter trout','brian wilson','the vaughan brothers','joe liggins','lester davenport')
networkData <- data.frame(X1,X2)
music_sim<- read.csv('R_extra/music.csv') %>%
data.frame() %>%
select(
Artist = artist_name,
Genre = genre,
Track = track_name,
Lyrics = lyrics
)  # Change path if necessary!
shuffled_df <- music_df[sample(nrow(music_df)), ]
shuffled_df <-music_sim[sample(nrow(music_sim)), ]
# Tokenization
music.tb <- as_tibble(shuffled_df)
music.tok <- tidytext::unnest_tokens(
music.tb,
output = "word",
input = "Lyrics",
to_lower = TRUE,
strip_punct = TRUE,
strip_numeric = TRUE
)
music.sent <- inner_join(
x = music.tok,
y = textdata::lexicon_nrc(delete = T, manual_download =  T),
by = c("word" = "word"),
relationship = 'many-to-many'
)
### functions
getGenreMood <- function (genre){
if (genre==''){
stop('No genre submitted. Please submit one.')
}else{
return (music.sent[music.sent$Genre == genre,] %>%
group_by(Genre, sentiment) %>%
summarize(n = n()) %>%
ungroup() %>%
plot_ly(x = ~n,
y = ~sentiment,
color = ~sentiment,
type = 'bar',
mode = 'markers') %>%
layout(title = genre, margin = list(t = 30)))
}
}
getTraksentiement <- function(track){
if (track == ''){
stop('No track submitted. Please insert one.')
}else{
return (music.sent[music.sent$Track == track,] %>% # filter and keep only given track
group_by(Track, sentiment) %>%
summarize(n = n()) %>%
ungroup() %>%
plot_ly(x = ~n,
y = ~sentiment,
color = ~sentiment,
type = 'bar',
mode = 'markers') %>%
layout(title = track, margin = list(t = 60)))
}
}
getArtistSentiement <- function(artist){
if (artist == ''){
stop('No artist submitted. Please submit one.')
}else{
return (music.sent[music.sent$Artist == artist,] %>% # filter and keep only track given
group_by(Artist, sentiment) %>%
summarize(n = n()) %>%
ungroup() %>%
plot_ly(x = ~n,
y = ~sentiment,
color = ~sentiment,
type = 'bar',
mode = 'markers') %>%
layout(title = artist, margin = list(t = 60)))
}
}
getwd()
load('../MyApp_R/data-raw/mydata.rda')
rm(list=ls())
ls()
ls()
load('../MyApp_R/data-raw/mydata.rda')
ls()
load('../MyApp_R/data-raw/mydata.rda')
mylist['sandra']
rm(list=ls())
music_sim<- read.csv('R_extra/music.csv') %>%
data.frame() %>%
select(
Artist = artist_name,
Genre = genre,
Track = track_name,
Lyrics = lyrics
)  # Change path if necessary!
source('packages.R')
setwd('~/Desktop/UNIL/codingshit/myApp/shiny')
source('R_extra/packages.R')
music_sim<- read.csv('R_extra/music.csv') %>%
data.frame() %>%
select(
Artist = artist_name,
Genre = genre,
Track = track_name,
Lyrics = lyrics
)  # Change path if necessary!
shuffled_df <- music_sim [sample(nrow(music_sim)), ]
# Tokenization
music.tb <- as_tibble(shuffled_df)
music.tok <- tidytext::unnest_tokens(
music.tb,
output = "word",
input = "Lyrics",
to_lower = TRUE,
strip_punct = TRUE,
strip_numeric = TRUE
)
music.sent <- inner_join(
x = music.tok,
y = textdata::lexicon_nrc(delete = T, manual_download =  T),
by = c("word" = "word"),
relationship = 'many-to-many'
)
### functions
getGenreMood <- function (genre){
if (genre==''){
stop('No genre submitted. Please submit one.')
}else{
return (music.sent[music.sent$Genre == genre,] %>%
group_by(Genre, sentiment) %>%
summarize(n = n()) %>%
ungroup() %>%
plot_ly(x = ~n,
y = ~sentiment,
color = ~sentiment,
type = 'bar',
mode = 'markers') %>%
layout(title = genre, margin = list(t = 30)))
}
}
getTraksentiement <- function(track){
if (track == ''){
stop('No track submitted. Please insert one.')
}else{
return (music.sent[music.sent$Track == track,] %>% # filter and keep only given track
group_by(Track, sentiment) %>%
summarize(n = n()) %>%
ungroup() %>%
plot_ly(x = ~n,
y = ~sentiment,
color = ~sentiment,
type = 'bar',
mode = 'markers') %>%
layout(title = track, margin = list(t = 60)))
}
}
getArtistSentiement <- function(artist){
if (artist == ''){
stop('No artist submitted. Please submit one.')
}else{
return (music.sent[music.sent$Artist == artist,] %>% # filter and keep only track given
group_by(Artist, sentiment) %>%
summarize(n = n()) %>%
ungroup() %>%
plot_ly(x = ~n,
y = ~sentiment,
color = ~sentiment,
type = 'bar',
mode = 'markers') %>%
layout(title = artist, margin = list(t = 60)))
}
}
music_sim <- read_delim(
"R_extra/music.csv",
escape_double = FALSE,
trim_ws = TRUE)
set.seed(1234)# reproductibility
sampled_unique_rows <- music_sim[!duplicated(music_sim$artist_name), ]
sampled_rows <- sampled_unique_rows[sample(nrow(sampled_unique_rows)), ]
shuffuled_music3 <- sampled_rows[1:100,]
!shuffuled_music3$artist_name %in% shuffuled_music3$artist_name[duplicated(shuffuled_music3$artist_name )]
music.corpus<- corpus(shuffuled_music3$lyrics)
music.tk <- tokens(
music.corpus,
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_separators=TRUE)%>%
tokens_tolower() %>%
tokens_remove(stop_words$word)%>% tokens_replace(.,pattern = hash_lemmas$token,
replacement = hash_lemmas$lemma)
### GLOVE MODEL
fcm <- fcm(music.tk,
context = "window",
count = "weighted",
window= 10, # mean result of lyrics set
weights = 1/(1:10), # custom
tri = FALSE)
glove <- GlobalVectors$new(rank = 50, x_max = 10) # model
word_vectors_main <- glove$fit_transform(fcm, n_iter = 100) # a changer !
word_vectors_context <- glove$components
glove_model <- word_vectors_main + t(word_vectors_context)
## RWMD algo to computes distances
dtm<-dfm(music.tk)
music.rwmd<-RelaxedWordMoversDistance$new(dtm,glove_model)
music.rwmd <- music.rwmd$dist2(dtm) ## distances obtained
#######
myfunct2 <- function(){ ## function that returns 2 lists : artist_name and track_name
mylist <- c()
mylist_w<-c()
l <- shuffuled_music3$artist_name
w <-  shuffuled_music3$track_name
for (i in 1:length(l)){
mylist<-append(mylist,l[i])
}
for(i in 1:length(w)){
mylist_w<-append(mylist_w,w[i])
}
mylist <<- mylist
mylist_w <<-mylist_w
} # get name lists
myfunct2()
row.names(music.rwmd) <- mylist
colnames(music.rwmd)<-mylist
#### network part
X1 <- c('low','sandra','bobby vee','bobby vee','bobby vee','pat travers','pat travers','pat travers57','pat travers',
'timothy b. schmit60','timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit',
'timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit','timothy b. schmit',
'timothy b. schmit','the dave clark five','the dave clark five','the dave clark five',
'the dave clark five98','the dave clark five','the dave clark five','the dave clark five',
'the dave clark five','the dave clark five','the dave clark five','joe liggins','joe liggins',
'joe liggins','joe liggins46','julian marley','the dubs')
X2 <- c('the sundays','rex smith','lebrado','floetry','pat travers','granger smith','nada surf','julian marley',
'timothy b. schmit','the dubs','nick lowe','steely dan','delicatessen','alien ant farm','camila cabello',
'solange','the fortunes','a r i z o n a','elkie brooks','pat travers','brick & lace','nada surf',
'phil perry','wax tailor','joe liggins','pennywise','nick lowe','delicatessen','nick lowe','the dubs',
'incognito','walter trout','brian wilson','the vaughan brothers','joe liggins','lester davenport')
networkData <- data.frame(X1,X2)
# text recommendations
recoFunction <- function(artist_name){
mytext<-music.rwmd[,artist_name] %>% sort(.,decreasing = T) %>% head() %>% names()
a<-paste('n°',1,':',mytext[1])
b<-paste('n°',2,':',mytext[2])
c<-paste('n°',3,':',mytext[3])
d<-paste('n°',4,':',mytext[4])
e<-paste('n°',5,':',mytext[5])
f<-paste('n°',6,':',mytext[6])
return(print(c(a,b,c,d,c,e,f)))
}
ui <- dashboardPage(
dashboardHeader(
title = "myApp Dashboard",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Home",href = '/index.html', icon = icon("home")),
menuItem("Artist Recommendation", tabName = "artist", icon = icon("user")),
selectInput('select','Please select', choices = shuffuled_music3$artist_name),
actionButton('btn','Search'),
menuItem("Genre Mood", tabName = "genre", icon = icon("music")),
selectInput('select_genre','Please select', choices = shuffuled_music3$genre),
actionButton('btn_genre','Search'),
menuItem("Artist Mood", tabName = "artist_mood", icon = icon("music")),
selectInput('select_artist','Please select', choices = shuffuled_music3$artist_name),
actionButton('btn_artist','Search'),
menuItem("Track Mood", tabName = "track_mood", icon = icon("music")),
selectInput('select_track','Please select', choices = shuffuled_music3$track_name),
actionButton('btn_track','Search')
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "artist",
fluidRow(
box(
title = "Artist Recommendation",
textOutput('recommendations_text'),
status = "info",
solidHeader = TRUE,
width = 6,
height = "110px",
),
simpleNetworkOutput('recommendations')
)
),
tabItem(
tabName = "genre",
fluidRow(
box(
title = "Genre Mood",
status = "info",
solidHeader = TRUE,
width = 6,
height = "400px"),
plotlyOutput('genre')
)
),
tabItem(
tabName = "artist_mood",
fluidRow(
box(
title = "Artist Mood",
status = "info",
solidHeader = TRUE,
width = 6,
height = "400px"),
plotlyOutput('artist')
)
),
tabItem(
tabName = "track_mood",
fluidRow(
box(
title = "Track Mood",
status = "info",
solidHeader = TRUE,
width = 6,
height = "400px"),
plotlyOutput('track')
)
)
)
)
)
mynetworkPlot <-simpleNetwork(networkData, height = 1000, width = 1000,opacity = 0.7,
nodeColour = '#FF00FF',zoom = T)
# Server
server <- function(input, output, session) {
# Recommendations + Network
observeEvent(input$btn,{
print('genre button clicked')
output$recommendations_text <- renderText({
artist <- input$select
req(artist)
print('selected input captured and function called')
return(recoFunction(artist))
})
})
# network
#mynetworkPlot <-simpleNetwork(networkData, height = 1000, width = 1000,opacity = 0.7,
#                             nodeColour = '#FF00FF',zoom = T)
observeEvent(input$btn,{
print('genre button clicked')
output$recommendations <- renderSimpleNetwork({
print('Network is loading...')
return(mynetworkPlot)
})
})
## sentiments plots
observeEvent(input$btn_genre,{
print('genre button clicked')
output$genre <- renderPlotly({
genre<-input$select_genre
req(genre)
print('selected input captured and function called')
return(getGenreMood(genre))
})
})
## artist
observeEvent(input$btn_artist,{
print('genre button clicked')
output$artist <- renderPlotly({
artist_name<-input$select_artist
req(artist_name)
print('selected input captured and function called')
return(getArtistSentiement(artist_name))
})
})
##track
observeEvent(input$btn_track,{
print('genre button clicked')
output$track <- renderPlotly({
track<-input$select_track
req(track)
print('selected input captured and function called')
return(getTraksentiement(track))
})
})
}
save('../MyApp_R/data-raw/mydata.rda')
save('../myApp_R/data-raw/mydata.rda')
save('./myApp_R/data-raw/mydata.rda')
save('.../myApp_R/data-raw/mydata.rda')
save(list = ls(globalenv()),file = '../myApp_R/data-raw/mydata.rda')
libray(MyappR)
MyappR::main()
setwd('../MyApp_R')
MyappR::main()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
